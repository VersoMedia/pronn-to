generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

generator zod {
  provider      = "zod-prisma"
  output        = "./zod"
  imports       = "./zod-utils"
  relationModel = "default"
}

generator enums {
  provider = "ts-node --transpile-only ./enum-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Host {
  userId      Int
  eventTypeId Int
  isFixed     Boolean   @default(false)
  eventType   EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, eventTypeId])
  @@index([userId])
  @@index([eventTypeId])
}

model EventType {
  id                              Int                     @id @default(autoincrement())
  /// @zod.min(1)
  title                           String
  /// @zod.custom(imports.eventTypeSlug)
  slug                            String
  description                     String?
  /// @zod.custom(imports.eventTypeLocations)
  locations                       Json?
  length                          Int
  hidden                          Boolean                 @default(false)
  userId                          Int?
  eventName                       String?
  timeZone                        String?
  periodCountCalendarDays         Boolean?
  periodDays                      Int?
  periodEndDate                   DateTime?
  periodStartDate                 DateTime?
  requiresConfirmation            Boolean                 @default(false)
  /// @zod.min(0)
  minimumBookingNotice            Int                     @default(120)
  currency                        String                  @default("usd")
  price                           Int                     @default(0)
  schedulingType                  SchedulingType?
  teamId                          Int?
  disableGuests                   Boolean                 @default(false)
  position                        Int                     @default(0)
  periodType                      PeriodType              @default(UNLIMITED)
  slotInterval                    Int?
  /// @zod.custom(imports.EventTypeMetaDataSchema)
  metadata                        Json?
  afterEventBuffer                Int                     @default(0)
  beforeEventBuffer               Int                     @default(0)
  hideCalendarNotes               Boolean                 @default(false)
  /// @zod.custom(imports.successRedirectUrl)
  successRedirectUrl              String?
  seatsPerTimeSlot                Int?
  /// @zod.custom(imports.recurringEventType)
  recurringEvent                  Json?
  scheduleId                      Int?
  /// @zod.custom(imports.intervalLimitsType)
  bookingLimits                   Json?
  seatsShowAttendees              Boolean?                @default(false)
  /// @zod.custom(imports.eventTypeBookingFields)
  bookingFields                   Json?
  /// @zod.custom(imports.intervalLimitsType)
  durationLimits                  Json?
  parentId                        Int?
  offsetStart                     Int                     @default(0)
  requiresBookerEmailVerification Boolean                 @default(false)
  paymentCash                     Boolean?                @default(false)
  paymentTransfer                 Boolean?                @default(false)
  availability                    Availability[]
  bookings                        Booking[]
  destinationCalendar             DestinationCalendar?
  parent                          EventType?              @relation("managed_eventtype", fields: [parentId], references: [id], onDelete: Cascade)
  children                        EventType[]             @relation("managed_eventtype")
  schedule                        Schedule?               @relation(fields: [scheduleId], references: [id])
  team                            Team?                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  owner                           User?                   @relation("owner", fields: [userId], references: [id], onDelete: Cascade)
  customInputs                    EventTypeCustomInput[]
  hashedLink                      HashedLink?
  hosts                           Host[]
  webhooks                        Webhook[]
  workflows                       WorkflowsOnEventTypes[]
  users                           User[]                  @relation("user_eventtype")

  @@unique([userId, slug])
  @@unique([teamId, slug])
  @@unique([userId, parentId])
  @@index([userId])
  @@index([teamId])
}

model TransferCredential {
  id     Int     @id @default(autoincrement())
  userId Int?    @unique
  clabe  String?
  name   String?
  bank   String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Credential {
  id                   Int                   @id @default(autoincrement())
  type                 String
  key                  Json
  userId               Int?
  appId                String?
  invalid              Boolean?              @default(false)
  teamId               Int?
  app                  App?                  @relation(fields: [appId], references: [slug], onDelete: Cascade)
  team                 Team?                 @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user                 User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  destinationCalendars DestinationCalendar[]

  @@index([userId])
  @@index([appId])
}

model DestinationCalendar {
  id           Int         @id @default(autoincrement())
  integration  String
  externalId   String
  userId       Int?        @unique
  eventTypeId  Int?        @unique
  credentialId Int?
  booking      Booking[]
  credential   Credential? @relation(fields: [credentialId], references: [id], onDelete: Cascade)
  eventType    EventType?  @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventTypeId])
  @@index([credentialId])
}

model User {
  id                   Int                     @id @default(autoincrement())
  username             String?
  name                 String?
  /// @zod.email()
  email                String                  @unique
  password             String?
  bio                  String?
  avatar               String?
  timeZone             String                  @default("Europe/London")
  weekStart            String                  @default("Sunday")
  startTime            Int                     @default(0)
  endTime              Int                     @default(1440)
  createdDate          DateTime                @default(now()) @map("created")
  bufferTime           Int                     @default(0)
  emailVerified        DateTime?
  hideBranding         Boolean                 @default(false)
  theme                String?
  completedOnboarding  Boolean                 @default(false)
  twoFactorEnabled     Boolean                 @default(false)
  twoFactorSecret      String?
  locale               String?
  brandColor           String                  @default("#292929")
  identityProvider     IdentityProvider        @default(CAL)
  identityProviderId   String?
  invitedTo            Int?
  metadata             Json?
  away                 Boolean                 @default(false)
  verified             Boolean?                @default(false)
  timeFormat           Int?                    @default(12)
  darkBrandColor       String                  @default("#fafafa")
  trialEndsAt          DateTime?
  defaultScheduleId    Int?
  allowDynamicBooking  Boolean?                @default(true)
  role                 UserPermissionRole      @default(USER)
  disableImpersonation Boolean                 @default(false)
  organizationId       Int?
  allowSEOIndexing     Boolean?                @default(true)
  phone                String?
  freeTrial            String?
  paymentMembership    Json?
  stripe_customer_id   String?
  /// @zod.custom(imports.userMetadata)
  landingFields        Json?
  freeTrialAccount     Boolean?                @default(true)
  accounts             Account[]
  apiKeys              ApiKey[]
  routingForms         App_RoutingForms_Form[] @relation("routing-form")
  attendees            Attendee[]
  availability         Availability[]
  bookings             Booking[]
  credentials          Credential[]
  destinationCalendar  DestinationCalendar?
  ownedEventTypes      EventType[]             @relation("owner")
  Feedback             Feedback[]
  hosts                Host[]
  impersonatedBy       Impersonations[]        @relation("impersonated_by_user")
  impersonatedUsers    Impersonations[]        @relation("impersonated_user")
  teams                Membership[]
  notificationSettings NotificationSettings?
  schedules            Schedule[]
  selectedCalendars    SelectedCalendar[]
  sessions             Session[]
  transferCredentials  TransferCredential?
  verifiedNumbers      VerifiedNumber[]
  webhooks             Webhook[]
  workflows            Workflow[]
  organization         Team?                   @relation("scope", fields: [organizationId], references: [id])
  eventTypes           EventType[]             @relation("user_eventtype")

  @@unique([email, username])
  @@unique([username, organizationId])
  @@index([emailVerified])
  @@index([identityProvider])
  @@index([identityProviderId])
  @@map("users")
}

model NotificationSettings {
  id                    Int     @id @default(autoincrement())
  customerWhats         Boolean @default(false)
  customerEmail         Boolean @default(false)
  customerSms           Boolean @default(false)
  memberWhats           Boolean @default(false)
  memberEmail           Boolean @default(false)
  memberSms             Boolean @default(false)
  userId                Int     @unique
  oneDay                Boolean @default(true)
  oneHour               Boolean @default(true)
  sixHours              Boolean @default(false)
  twelveHours           Boolean @default(false)
  twoDays               Boolean @default(false)
  textOneDays           String? @default("")
  textOneHours          String? @default("")
  textSixHours          String? @default("")
  textTwelveHours       String? @default("")
  textTwoDays           String? @default("")
  textThirtyMinutes     String? @default("")
  thirtyMinutes         Boolean @default(false)
  confirmationQuote     Boolean @default(false)
  textConfirmationQuote String? @default("")
  confirmQuote          Boolean @default(true)
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id                  Int                     @id @default(autoincrement())
  /// @zod.min(1)
  name                String
  /// @zod.min(1)
  slug                String?
  bio                 String?
  hideBranding        Boolean                 @default(false)
  logo                String?
  createdAt           DateTime                @default(now())
  /// @zod.custom(imports.teamMetadataSchema)
  metadata            Json?
  hideBookATeamMember Boolean                 @default(false)
  brandColor          String                  @default("#292929")
  darkBrandColor      String                  @default("#fafafa")
  theme               String?
  appLogo             String?
  appIconLogo         String?
  parentId            Int?
  timeFormat          Int?
  timeZone            String                  @default("Europe/London")
  weekStart           String                  @default("Sunday")
  isPrivate           Boolean                 @default(false)
  apiKeys             ApiKey[]
  routingForms        App_RoutingForms_Form[]
  credentials         Credential[]
  eventTypes          EventType[]
  members             Membership[]
  parent              Team?                   @relation("organization", fields: [parentId], references: [id], onDelete: Cascade)
  children            Team[]                  @relation("organization")
  inviteTokens        VerificationToken[]
  verifiedNumbers     VerifiedNumber[]
  webhooks            Webhook[]
  workflows           Workflow[]
  orgUsers            User[]                  @relation("scope")

  @@unique([slug, parentId])
}

model Membership {
  teamId               Int
  userId               Int
  accepted             Boolean        @default(false)
  role                 MembershipRole
  disableImpersonation Boolean        @default(false)
  id                   Int            @id @default(autoincrement())
  team                 Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([teamId])
  @@index([userId])
}

model VerificationToken {
  id            Int      @id @default(autoincrement())
  identifier    String
  token         String   @unique
  expires       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  expiresInDays Int?
  teamId        Int?
  team          Team?    @relation(fields: [teamId], references: [id])

  @@unique([identifier, token])
  @@index([token])
}

model BookingReference {
  id                 Int      @id @default(autoincrement())
  /// @zod.min(1)
  type               String
  /// @zod.min(1)
  uid                String
  bookingId          Int?
  meetingId          String?
  meetingPassword    String?
  meetingUrl         String?
  deleted            Boolean?
  externalCalendarId String?
  credentialId       Int?
  booking            Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([credentialId])
  @@index([type])
  @@index([uid])
}

model Attendee {
  id          Int                   @id @default(autoincrement())
  email       String?
  name        String
  timeZone    String
  bookingId   Int?
  locale      String?               @default("en")
  phone       String?
  userId      Int?
  booking     Booking?              @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  user        User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingMany AttendeeManyBooking[]
  bookingSeat BookingSeat?

  @@index([email])
  @@index([bookingId])
  @@index([userId])
}

model AttendeeManyBooking {
  id         Int      @id @default(autoincrement())
  attendeeId Int
  bookingId  Int
  attendee   Attendee @relation(fields: [attendeeId], references: [id])
  booking    Booking  @relation(fields: [bookingId], references: [id])

  @@index([attendeeId])
  @@index([bookingId])
}

model Booking {
  id                    Int                   @id @default(autoincrement())
  uid                   String                @unique
  userId                Int?
  eventTypeId           Int?
  title                 String
  description           String?
  startTime             DateTime
  endTime               DateTime
  createdAt             DateTime              @default(now())
  updatedAt             DateTime?
  location              String?
  paid                  Boolean               @default(false)
  status                BookingStatus         @default(ACCEPTED)
  cancellationReason    String?
  rejectionReason       String?
  fromReschedule        String?
  rescheduled           Boolean?
  dynamicEventSlugRef   String?
  dynamicGroupSlugRef   String?
  recurringEventId      String?
  customInputs          Json?
  smsReminderNumber     String?
  destinationCalendarId Int?
  scheduledJobs         String[]
  /// @zod.custom(imports.bookingMetadataSchema)
  metadata              Json?
  /// @zod.custom(imports.bookingResponses)
  responses             Json?
  isRecorded            Boolean               @default(false)
  attendees             Attendee[]
  attendeesMany         AttendeeManyBooking[]
  destinationCalendar   DestinationCalendar?  @relation(fields: [destinationCalendarId], references: [id])
  eventType             EventType?            @relation(fields: [eventTypeId], references: [id])
  user                  User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  BookingNotifications  BookingNotifications?
  references            BookingReference[]
  seatsReferences       BookingSeat[]
  payment               Payment[]
  workflowReminders     WorkflowReminder[]

  @@index([eventTypeId])
  @@index([userId])
  @@index([destinationCalendarId])
  @@index([recurringEventId])
  @@index([uid])
  @@index([status])
}

model BookingNotifications {
  id                                 Int     @id @default(autoincrement())
  bookingId                          Int     @unique
  whatsConfirmationSent              Boolean @default(false)
  whatsCustomerConfirmationAnswered  Boolean @default(false)
  whatsCustomerConfirmationTrackId   String?
  whatsCustomerDayReminderAnswered   Boolean @default(false)
  whatsCustomerDayReminderSent       Boolean @default(false)
  whatsCustomerDayReminderTrackId    String?
  whatsCustomerMemberDayReminderSent Boolean @default(false)
  whatsMemberDayReminderAnswered     Boolean @default(false)
  whatsMemberDayReminderTrackId      String?
  whatsMemberHourReminderAnswered    Boolean @default(false)
  whatsMemberHourReminderSent        Boolean @default(false)
  whatsMemberHourReminderTrackId     String?
  booking                            Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model Schedule {
  id           Int            @id @default(autoincrement())
  userId       Int
  name         String
  timeZone     String?
  availability Availability[]
  eventType    EventType[]
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Availability {
  id          Int        @id @default(autoincrement())
  userId      Int?
  eventTypeId Int?
  days        Int[]
  date        DateTime?  @db.Date
  startTime   DateTime   @db.Time(6)
  endTime     DateTime   @db.Time(6)
  scheduleId  Int?
  eventType   EventType? @relation(fields: [eventTypeId], references: [id])
  Schedule    Schedule?  @relation(fields: [scheduleId], references: [id])
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventTypeId])
  @@index([scheduleId])
}

model SelectedCalendar {
  userId      Int
  integration String
  externalId  String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, integration, externalId])
  @@index([userId])
  @@index([integration])
  @@index([externalId])
}

model EventTypeCustomInput {
  id          Int                      @id @default(autoincrement())
  eventTypeId Int
  label       String
  required    Boolean
  type        EventTypeCustomInputType
  placeholder String                   @default("")
  /// @zod.custom(imports.customInputOptionSchema)
  options     Json?
  eventType   EventType                @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)

  @@index([eventTypeId])
}

model ResetPasswordRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String
  expires   DateTime
}

model ReminderMail {
  id             Int          @id @default(autoincrement())
  referenceId    Int
  reminderType   ReminderType
  elapsedMinutes Int
  createdAt      DateTime     @default(now())

  @@index([referenceId])
  @@index([reminderType])
}

model Payment {
  id            Int            @id @default(autoincrement())
  uid           String         @unique
  bookingId     Int
  amount        Int
  fee           Int
  currency      String
  success       Boolean
  refunded      Boolean
  data          Json
  externalId    String         @unique
  appId         String?
  paymentOption PaymentOption? @default(ON_BOOKING)
  app           App?           @relation(fields: [appId], references: [slug], onDelete: Cascade)
  booking       Booking        @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([externalId])
}

model Webhook {
  id              String                 @id @unique
  userId          Int?
  /// @zod.url()
  subscriberUrl   String
  createdAt       DateTime               @default(now())
  active          Boolean                @default(true)
  eventTriggers   WebhookTriggerEvents[]
  payloadTemplate String?
  eventTypeId     Int?
  appId           String?
  secret          String?
  teamId          Int?
  app             App?                   @relation(fields: [appId], references: [slug], onDelete: Cascade)
  eventType       EventType?             @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  team            Team?                  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user            User?                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, subscriberUrl], name: "courseIdentifier")
}

model Impersonations {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  impersonatedUserId Int
  impersonatedById   Int
  impersonatedBy     User     @relation("impersonated_by_user", fields: [impersonatedById], references: [id], onDelete: Cascade)
  impersonatedUser   User     @relation("impersonated_user", fields: [impersonatedUserId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id         String    @id @unique @default(cuid())
  userId     Int
  note       String?
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?
  hashedKey  String    @unique
  appId      String?
  teamId     Int?
  app        App?      @relation(fields: [appId], references: [slug], onDelete: Cascade)
  team       Team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model HashedLink {
  id          Int       @id @default(autoincrement())
  link        String    @unique
  eventTypeId Int       @unique
  eventType   EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([type])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model App {
  slug        String          @id @unique
  dirName     String          @unique
  keys        Json?
  categories  AppCategories[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  enabled     Boolean         @default(false)
  ApiKey      ApiKey[]
  credentials Credential[]
  payments    Payment[]
  Webhook     Webhook[]

  @@index([enabled])
}

model App_RoutingForms_Form {
  id          String                          @id @default(cuid())
  description String?
  routes      Json?
  createdAt   DateTime                        @default(now())
  updatedAt   DateTime                        @updatedAt
  name        String
  fields      Json?
  userId      Int
  disabled    Boolean                         @default(false)
  /// @zod.custom(imports.RoutingFormSettings)
  settings    Json?
  teamId      Int?
  team        Team?                           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user        User                            @relation("routing-form", fields: [userId], references: [id], onDelete: Cascade)
  responses   App_RoutingForms_FormResponse[]

  @@index([userId])
  @@index([disabled])
}

model App_RoutingForms_FormResponse {
  id           Int                   @id @default(autoincrement())
  formFillerId String                @default(cuid())
  formId       String
  response     Json
  createdAt    DateTime              @default(now())
  form         App_RoutingForms_Form @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@unique([formFillerId, formId])
  @@index([formFillerId])
  @@index([formId])
}

model Feedback {
  id      Int      @id @default(autoincrement())
  date    DateTime @default(now())
  userId  Int
  rating  String
  comment String?
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([rating])
}

model WorkflowStep {
  id                        Int                @id @default(autoincrement())
  stepNumber                Int
  action                    WorkflowActions
  workflowId                Int
  sendTo                    String?
  reminderBody              String?
  emailSubject              String?
  template                  WorkflowTemplates  @default(REMINDER)
  numberRequired            Boolean?
  sender                    String?
  numberVerificationPending Boolean            @default(true)
  workflowReminders         WorkflowReminder[]
  workflow                  Workflow           @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
}

model Workflow {
  id       Int                     @id @default(autoincrement())
  name     String
  userId   Int?
  trigger  WorkflowTriggerEvents
  time     Int?
  timeUnit TimeUnit?
  teamId   Int?
  team     Team?                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User?                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps    WorkflowStep[]
  activeOn WorkflowsOnEventTypes[]

  @@index([userId])
  @@index([teamId])
}

model WorkflowsOnEventTypes {
  id          Int       @id @default(autoincrement())
  workflowId  Int
  eventTypeId Int
  eventType   EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@unique([workflowId, eventTypeId])
  @@index([workflowId])
  @@index([eventTypeId])
}

model Deployment {
  /// This is a single row table, so we use a fixed id
  id              Int       @id @default(1)
  logo            String?
  /// @zod.custom(imports.DeploymentTheme)
  theme           Json?
  licenseKey      String?
  agreedLicenseAt DateTime?
}

model WorkflowReminder {
  id              Int             @id @default(autoincrement())
  bookingUid      String?
  method          WorkflowMethods
  scheduledDate   DateTime
  referenceId     String?         @unique
  scheduled       Boolean
  workflowStepId  Int?
  cancelled       Boolean?
  seatReferenceId String?
  booking         Booking?        @relation(fields: [bookingUid], references: [uid])
  workflowStep    WorkflowStep?   @relation(fields: [workflowStepId], references: [id])

  @@index([bookingUid])
  @@index([workflowStepId])
  @@index([seatReferenceId])
}

model BookingSeat {
  id           Int      @id @default(autoincrement())
  referenceUid String   @unique
  bookingId    Int
  attendeeId   Int      @unique
  data         Json?
  attendee     Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  booking      Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
  @@index([attendeeId])
}

model VerifiedNumber {
  id          Int    @id @default(autoincrement())
  userId      Int?
  phoneNumber String
  teamId      Int?
  team        Team?  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user        User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([teamId])
}

model Feature {
  slug        String       @id @unique
  enabled     Boolean      @default(false)
  description String?
  type        FeatureType? @default(RELEASE)
  stale       Boolean?     @default(false)
  lastUsedAt  DateTime?
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @default(now()) @updatedAt
  updatedBy   Int?

  @@index([enabled])
  @@index([stale])
}

model SelectedSlots {
  id               Int      @id @default(autoincrement())
  eventTypeId      Int
  userId           Int
  slotUtcStartDate DateTime
  slotUtcEndDate   DateTime
  uid              String
  releaseAt        DateTime
  isSeat           Boolean  @default(false)

  @@unique([userId, slotUtcStartDate, slotUtcEndDate, uid], name: "selectedSlotUnique")
}

view BookingTimeStatus {
  id            Int            @unique
  uid           String?
  eventTypeId   Int?
  title         String?
  description   String?
  startTime     DateTime?
  endTime       DateTime?
  createdAt     DateTime?
  location      String?
  paid          Boolean?
  status        BookingStatus?
  rescheduled   Boolean?
  userId        Int?
  teamId        Int?
  eventLength   Int?
  timeStatus    String?
  eventParentId Int?
}

enum SchedulingType {
  ROUND_ROBIN @map("roundRobin")
  COLLECTIVE  @map("collective")
  MANAGED     @map("managed")
}

enum PeriodType {
  UNLIMITED @map("unlimited")
  ROLLING   @map("rolling")
  RANGE     @map("range")
}

enum IdentityProvider {
  CAL
  GOOGLE
  SAML
}

enum UserPermissionRole {
  USER
  ADMIN
}

enum MembershipRole {
  MEMBER
  OWNER
  ADMIN
}

enum BookingStatus {
  CANCELLED @map("cancelled")
  ACCEPTED  @map("accepted")
  REJECTED  @map("rejected")
  PENDING   @map("pending")
}

enum EventTypeCustomInputType {
  TEXT     @map("text")
  TEXTLONG @map("textLong")
  NUMBER   @map("number")
  BOOL     @map("bool")
  PHONE    @map("phone")
  RADIO    @map("radio")
}

enum ReminderType {
  PENDING_BOOKING_CONFIRMATION
}

enum PaymentOption {
  ON_BOOKING
  HOLD
}

enum WebhookTriggerEvents {
  BOOKING_CREATED
  BOOKING_RESCHEDULED
  BOOKING_CANCELLED
  FORM_SUBMITTED
  MEETING_ENDED
  RECORDING_READY
  BOOKING_PAID
  BOOKING_REQUESTED
  BOOKING_REJECTED
}

enum AppCategories {
  calendar
  messaging
  other
  payment
  video
  web3
  automation
  analytics
  conferencing
  crm
}

enum WorkflowTriggerEvents {
  BEFORE_EVENT
  EVENT_CANCELLED
  NEW_EVENT
  RESCHEDULE_EVENT
  AFTER_EVENT
}

enum WorkflowActions {
  EMAIL_HOST
  EMAIL_ATTENDEE
  SMS_ATTENDEE
  SMS_NUMBER
  EMAIL_ADDRESS
  WHATSAPP_ATTENDEE
  WHATSAPP_NUMBER
}

enum TimeUnit {
  DAY    @map("day")
  HOUR   @map("hour")
  MINUTE @map("minute")
}

enum WorkflowTemplates {
  REMINDER
  CUSTOM
  CANCELLED
  RESCHEDULED
  COMPLETED
}

enum WorkflowMethods {
  EMAIL
  SMS
  WHATSAPP
}

enum FeatureType {
  RELEASE
  EXPERIMENT
  OPERATIONAL
  KILL_SWITCH
  PERMISSION
}
